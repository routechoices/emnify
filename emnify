#! ./env/bin/python3
import json
from dotenv import dotenv_values
import requests


def get_token():
    config = dotenv_values(".env")
    auth_data = {
        "application_token": config["API_TOKEN"]
    }
    r = requests.post(
        "https://cdn.emnify.net//api/v1/authenticate",
        data=json.dumps(auth_data),
        headers={"Content-Type": "application/json"},
    )
    return r.json()["auth_token"]


def list_sims(auth_token):
    r = requests.get(
        "https://cdn.emnify.net/api/v1/sim?per_page=2000",
        headers={
            "Authorization": f"Bearer {auth_token}"
        }
    )
    data = r.json()
    sim_list = [{"name": s["endpoint"]["name"], "data": s} for s in data]
    sim_list = sorted(sim_list, key=lambda sim: sim["name"])
    return sim_list


def list_activated_sims(auth_token):
    return [s for s in list_sims(auth_token) if s["data"]["status"]["id"] == 1]


def list_suspended_sims(auth_token):
    return [s for s in list_sims(auth_token) if s["data"]["status"]["id"] == 2]


def activate_sim(auth_token, sim_id):
    r = requests.patch(
        f"https://cdn.emnify.net/api/v1/sim/{sim_id}",
        data=json.dumps({"status": {"id": 1}}),
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {auth_token}"
        }
    )
    return r.status_code // 100 == 2


def activate_endpoint(auth_token, endpoint_id):
    r = requests.patch(
        f"https://cdn.emnify.net/api/v1/endpoint/{endpoint_id}",
        data=json.dumps({"status": {"id": 0}}),
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {auth_token}"
        }
    )
    return r.status_code // 100 == 2


def suspend_sim(auth_token, sim_id):
    r = requests.patch(
        f"https://cdn.emnify.net/api/v1/sim/{sim_id}",
        data=json.dumps({"status": {"id": 2}}),
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {auth_token}"
        }
    )
    return r.status_code // 100 == 2
    

def suspend_endpoint(auth_token, endpoint_id):
    r = requests.patch(
        f"https://cdn.emnify.net/api/v1/endpoint/{endpoint_id}",
        data=json.dumps({"status": {"id": 1}}),
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {auth_token}"
        }
    )
    return r.status_code // 100 == 2


def cli_list_sims(args):
    auth_token = get_token()
    sim_list = list_sims(auth_token)
    
    if not sim_list:
        print("No device")
        exit(0)

    for i, sim in enumerate(sim_list):
        print(
            f"{(i+1): >3}: {sim['name']: <8} {('ON' if sim['data']['status']['id'] == 1 else 'OFF'):>3}",
            end=" | " if i % 3 != 2 else " |\r\n"
        )
    exit(0)


def cli_enable_sims(args):
    auth_token = get_token()
    sim_list = list_sims(auth_token)
    for sim_idx in args.sim_id:
        if not (0 <= sim_idx - 1 < len(sim_list)):
            print(f"Invalid sim id {sim_idx}")
            continue
        sim = sim_list[sim_idx - 1]
        sim_id = sim["data"]["id"]
        enpoint_id = sim["data"]["endpoint"]["id"]
        sim_name = sim["name"]
        if sim['data']['status']['id'] == 1:
            print(f"Device {sim_name} already active...")
        elif activate_sim(auth_token, sim_id) and activate_endpoint(auth_token, endpoint_id):
            print(f"Device {sim_name} activated...")
        else:
            print(f"Fail to activate device {sim_name}...")
    exit(0)


def cli_disable_sims(args):
    auth_token = get_token()
    sim_list = list_sims(auth_token)
    for sim_idx in args.sim_id:
        if not (0 <= sim_idx - 1 < len(sim_list)):
            print(f"Invalid sim id {sim_idx}")
            continue
        sim = sim_list[sim_idx - 1]
        sim_id = sim["data"]["id"]
        enpoint_id = sim["data"]["endpoint"]["id"]
        sim_name = sim["name"]
        if sim['data']['status']['id'] == 2:
            print(f"Device {sim_name} already suspended...")
        elif suspend_sim(auth_token, sim_id) and suspend_endpoint(auth_token, endpoint_id):
            print(f"Device {sim_name} suspended...")
        else:
            print(f"Fail to suspend device {sim_name}...")
    exit(0)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        prog='emnify',
        description='Manage your SIM Cards'
    )
    subparsers = parser.add_subparsers(
        title="sub-commands",
        required=True,
    )
    list_parser = subparsers.add_parser(
        "list",
        help="List SIM cards"
    )
    list_parser.set_defaults(func=cli_list_sims)
    enable_parser = subparsers.add_parser(
        "enable",
        help="Activate SIM cards"
    )
    enable_parser.add_argument("sim_id", nargs="+", type=int)
    enable_parser.set_defaults(func=cli_enable_sims)

    disable_parser = subparsers.add_parser(
        "disable",
        help="Disable SIM cards"
    )
    disable_parser.add_argument("sim_id", nargs="+", type=int)
    disable_parser.set_defaults(func=cli_disable_sims)
    
    args = parser.parse_args()
    args.func(args)
